//! Minimal forward Phong example using in-memory GLSL from a LightingModel derive.

#[cfg(feature = "vulkan-linux")]
fn main() {
    use macrokid_graphics::engine::EngineBuilder;
    use macrokid_graphics::vk_linux::run_vulkan_linux_app_with_resources;
    use macrokid_graphics_derive::BufferLayout;
    use macrokid_graphics_lighting::{self as lighting, HasBindings};
    use macrokid_graphics_lighting_derive::LightingModel;

    // Derive a simple Phong lighting model; provides GLSL sources
    #[derive(LightingModel)]
    #[model = "phong"]
    struct PhongModel;

    // Use ResourceBindings generated by the LightingModel derive (CombinedImageSampler + UBO)

    #[derive(BufferLayout)]
    #[buffer(step = "vertex")]
    struct Vertex {
        #[vertex(location = 0, format = "vec3")] pos: [f32; 3],
        #[vertex(location = 1, format = "vec3")] normal: [f32; 3],
        #[vertex(location = 2, format = "vec2")] uv: [f32; 2],
    }

    // Use the helper to synthesize a PipelineDesc and bind to the model RB type
    let (desc, _rb) = lighting::forward_pipeline_and_rb::<PhongModel>("lighting_forward_phong");

    let cfg = EngineBuilder::new()
        .app("Lighting Forward Phong (inline)")
        .window(1280, 720, true)
        .add_pipeline(desc)
        .build()
        .expect("valid config");

    // Provide a 1x1 white texture and a UBO with MVP + light params
    // Layout matches shaders: mat4 (64 bytes) + vec3 dir (16) + vec3 color (16) = 96 bytes
    let mut id = [0f32; 16];
    id[0] = 1.0; id[5] = 1.0; id[10] = 1.0; id[15] = 1.0;
    let mut bytes: Vec<u8> = Vec::with_capacity(96);
    for f in id { bytes.extend_from_slice(&f.to_le_bytes()); }
    // light_dir = normalized (0.4,0.6,0.7)
    let ld = [0.4f32, 0.6, 0.7, 0.0]; // pad to 16 bytes
    for f in ld { bytes.extend_from_slice(&f.to_le_bytes()); }
    // light_color = white
    let lc = [1.0f32, 1.0, 1.0, 0.0];
    for f in lc { bytes.extend_from_slice(&f.to_le_bytes()); }
    let resources = macrokid_graphics::vk_linux::AppResources {
        uniform_data: Some(bytes),
        image_rgba: Some([255, 255, 255, 255]),
        image_size: None,
        image_pixels: None,
    };

    // Use the model's associated ResourceBindings type
    run_vulkan_linux_app_with_resources::<<PhongModel as HasBindings>::RB, Vertex>(&cfg, &resources)
        .expect("vulkan app ran");
}

#[cfg(not(feature = "vulkan-linux"))]
fn main() {
    eprintln!("This example requires the 'vulkan-linux' feature.\nTry: cargo run -p macrokid_graphics --example lighting_forward_phong --features vulkan-linux,vk-shaderc-compile");
}
